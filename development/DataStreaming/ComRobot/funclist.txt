 function Assigned(I: LongInt): Boolean;
 function IntToStr(I: Int64): string;
 function StrToInt(S: string): LongInt;
 function StrToIntDef(S: string; def: LongInt): LongInt;
 function Copy(S: AnyString; iFrom: LongInt; iCount: LongInt): AnyString;
 function Pos(SubStr: AnyString; S: AnyString): LongInt;
 procedure Delete(S: AnyString; iFrom: LongInt; iCount: LongInt);
 procedure Insert(S: AnyString; s2: AnyString; iPos: LongInt);
 function GetArrayLength(Arr): LongInt;
 procedure SetArrayLength(arr count: LongInt);
 function StrGet(S: string; I: LongInt): Char;
 function StrGet2(S: string; I: LongInt): Char;
 procedure StrSet(C: Char; I: LongInt; S: string);
 function WStrGet(S: AnyString; I: LongInt): WideChar;
 procedure WStrSet(C: AnyString; I: LongInt; S: AnyString);
 function VarArrayGet(S: Variant; I: LongInt): Variant;
 procedure VarArraySet(C: Variant; I: LongInt; S: Variant);
 function AnsiUpperCase(S: string): string;
 function AnsiLowerCase(S: string): string;
 function UpperCase(S: AnyString): AnyString;
 function LowerCase(S: AnyString): AnyString;
 function Trim(S: AnyString): AnyString;
 function Length(S): LongInt;
 procedure SetLength(s NewLength: LongInt);
 function Low(X): Int64;
 function High(X): Int64;
 procedure Dec(x);
 procedure Inc(x);
 procedure Include(s m);
 procedure Exclude(s m);
 function Sin(E: Extended): Extended;
 function Cos(E: Extended): Extended;
 function Sqrt(E: Extended): Extended;
 function Round(E: Extended): LongInt;
 function Trunc(E: Extended): LongInt;
 function Int(E: Extended): Extended;
 function Pi(): Extended;
 function Abs(E: Extended): Extended;
 function StrToFloat(S: string): Extended;
 function FloatToStr(E: Extended): string;
 function PadL(S: AnyString; I: LongInt): AnyString;
 function PadR(S: AnyString; I: LongInt): AnyString;
 function PadZ(S: AnyString; I: LongInt): AnyString;
 function Replicate(C: Char; I: LongInt): string;
 function StringOfChar(C: Char; I: LongInt): string;
 function Unassigned(): Variant;
 function VarIsEmpty(V: Variant): Boolean;
 function Null(): Variant;
 function VarIsNull(V: Variant): Boolean;
 function VarType(V: Variant): Word;
 procedure RaiseLastException();
 procedure RaiseException(Ex: TIFException; Param: string);
 function ExceptionType(): TIFException;
 function ExceptionParam(): string;
 function ExceptionProc(): LongWord;
 function ExceptionPos(): LongWord;
 function ExceptionToString(er: TIFException; Param: string): string;
 function StrToInt64(S: string): Int64;
 function Int64ToStr(I: Int64): string;
 function StrToInt64Def(S: string; def: Int64): Int64;
 function SizeOf(Data): LongInt;
 function IdispatchInvoke(Self: IDispatch; PropertySet: Boolean; Name: string; Par: !OPENARRAYOFVARIANT): Variant;
 function ShortCutToText(ShortCut: Word): string;
 function TextToShortCut(Text: string): Word;
 function NewMenu(Owner: TComponent; AName: string; Items: !OPENARRAYOFTOBJECT): TMainMenu;
 function NewPopupMenu(Owner: TComponent; AName: string; Alignment: TPopupAlignment; AutoPopup: Boolean; Items: !OPENARRAYOFTOBJECT): TPopupMenu;
 function NewSubMenu(ACaption: string; HCTX: Word; AName: string; Items: !OPENARRAYOFTOBJECT; AEnabled: Boolean): TMenuItem;
 function NewItem(ACaption: string; AShortCut: Word; Achecked: Boolean; AEnabled: Boolean; AOnClick: TNotifyEvent; HCTX: Word; AName: string): TMenuItem;
 function NewLine(): TMenuItem;
 procedure MInit(Mat: Matrix; newrows: LongWord; newcols: LongWord);
 procedure MTestData(Mat: Matrix; NRows: LongWord; NCols: LongWord);
 procedure MSetSize(Mat: Matrix; newrows: LongWord; newcols: LongWord);
 procedure Msetv(Mat: Matrix; r: LongWord; c: LongWord; v: Double);
 function Mgetv(Mat: Matrix; r: LongWord; c: LongWord): Double;
 procedure MUsetv(Mat: Matrix; r: LongWord; c: LongWord; v: Double);
 function MUgetv(Mat: Matrix; r: LongWord; c: LongWord): Double;
 function MIsGood(Mat: Matrix): Boolean;
 function MNumCols(Mat: Matrix): LongWord;
 function MNumRows(Mat: Matrix): LongWord;
 function Mzeros(numrows: LongWord; numcols: LongWord): Matrix;
 function Meye(n: LongWord): Matrix;
 function Mrandom(numrows: LongWord; numcols: LongWord): Matrix;
 function Minc(numrows: LongWord; numcols: LongWord): Matrix;
 procedure ArrayToMatrix(M: Matrix; D: !OPENARRAYOFDOUBLE);
 function Madd(A: Matrix; B: Matrix): Matrix;
 function MaddReal(A: Matrix; k: Double): Matrix;
 function Mneg(A: Matrix): Matrix;
 function Msub(A: Matrix; B: Matrix): Matrix;
 function MsubReal(A: Matrix; k: Double): Matrix;
 function MmultReal(A: Matrix; k: Double): Matrix;
 function Mmult(A: Matrix; B: Matrix): Matrix;
 function MPower(M: Matrix; n: LongInt): Matrix;
 function Mtran(M: Matrix): Matrix;
 function Minv(M: Matrix): Matrix;
 function Minv_fast(M: Matrix): Matrix;
 function MelementMult(A: Matrix; B: Matrix): Matrix;
 function Mmin(M: Matrix): Double;
 function Mmax(M: Matrix): Double;
 function MmaxAbs(M: Matrix): Double;
 function MallNorm(M: Matrix): Double;
 function MHflip(M: Matrix): Matrix;
 function MConv(A: Matrix; B: Matrix): Matrix;
 function MCrop(M: Matrix; uprow: LongWord; leftcol: LongWord; downrow: LongWord; rightcol: LongWord): Matrix;
 function MOneCol(M: Matrix; col: LongWord): Matrix;
 function MOneRow(M: Matrix; row: LongWord): Matrix;
 function MStamp(M: Matrix; S: Matrix; drow: LongWord; dcol: LongWord): Matrix;
 function MStampCol(M: Matrix; S: Matrix; col: LongWord): Matrix;
 function MStampRow(M: Matrix; S: Matrix; row: LongWord): Matrix;
 function MColsum(M: Matrix): Matrix;
 function MRowsum(M: Matrix): Matrix;
 function Mload(fname: string): Matrix;
 procedure Msave(M: Matrix; fname: string);
 procedure ChartSeriesAddXY(ChartIndex: LongInt; SeriesIndex: LongInt; X: Double; Y: Double);
 procedure ChartSeriesClear(ChartIndex: LongInt; SeriesIndex: LongInt);
 procedure ChartSetAxisMinMax(ChartIndex: LongInt; Xmin: Double; Xmax: Double; Ymin: Double; Ymax: Double);
 procedure ChartSeriesSetColor(ChartIndex: LongInt; SeriesIndex: LongInt; newColor: LongInt);
 function ChartSeriesGetCount(ChartIndex: LongInt): LongInt;
 procedure ChartSeriesSetCount(ChartIndex: LongInt; SeriesCount: LongInt);
 function ChartSeriesCreate(ChartIndex: LongInt): LongInt;
 procedure ChartSeriesDeleteAll(ChartIndex: LongInt);
 function gMessageFloat(c: string; f: Single): string;
 function gMessageInt(c: string; i: LongInt): string;
 function gMessageStr(c: string; s: string): string;
 function arcsin(x: Double): Double;
 function arccos(x: Double): Double;
 function tan(x: Extended): Extended;
 function ATan2(y: Double; x: Double): Double;
 function ACos2(y: Double; x: Double): Double;
 function ASin2(y: Double; x: Double): Double;
 function Power(Base: Extended; Exponent: Extended): Extended;
 function Log10(X: Extended): Extended;
 function LogN(Base: Extended; X: Extended): Extended;
 function Sqr(X: Double): Double;
 function Exp(X: Double): Double;
 function Ln(X: Double): Double;
 function FloatAsInteger(X: Single): LongInt;
 function IntegerAsFloat(X: LongInt): Single;
 function DiffAngle(a1: Double; a2: Double): Double;
 function Dist(x: Double; y: Double): Double;
 function Sign(a: Double): Double;
 function Sat(a: Double; limit: Double): Double;
 function NormalizeAngle(ang: Double): Double;
 function TranslateAndRotate(rx: Double; ry: Double; px: Double; py: Double; tx: Double; ty: Double; teta: Double): Double;
 function RotateAndTranslate(rx: Double; ry: Double; px: Double; py: Double; tx: Double; ty: Double; teta: Double): Double;
 function RotateAroundPoint(rx: Double; ry: Double; px: Double; py: Double; cx: Double; cy: Double; teta: Double): Double;
 function RandG(Mean: Extended; StdDev: Extended): Extended;
 function random01(): Double;
 procedure Randomize();
 function IntToHex(Value: LongInt; Digits: LongInt): string;
 procedure WriteLn(S: string);
 function Format(sFormat: string; Args: !OPENARRAYOFCONST): string;
 procedure SetRCValue(r: LongInt; c: LongInt; s: string);
 function GetRCValue(r: LongInt; c: LongInt): Double;
 function GetRCText(r: LongInt; c: LongInt): string;
 function ButtonPressed(ButtonName: string): Boolean;
 function RCButtonPressed(r: LongInt; c: LongInt): Boolean;
 function RangeToMatrix(r: LongInt; c: LongInt; rows: LongInt; cols: LongInt): Matrix;
 procedure MatrixToRange(r: LongInt; c: LongInt; M: Matrix);
 procedure MatrixToRangeF(r: LongInt; c: LongInt; M: Matrix; FormatString: string);
 procedure ClearButtons();
 function ScriptPeriod(): Double;
 function Now(): Double;
 function GetTickCount(): LongWord;
 function RGBToColor(R: Byte; G: Byte; B: Byte): LongInt;
